import time
import pandas as pd
import numpy as np
import sys

CITY_DATA = { 'chicago': 'chicago.csv',
              'new York': 'new_york_city.csv',
              'washington': 'washington.csv' }
months = ['january', 'february', 'march', 'april', 'may', 'june' , "all"]

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    
    while True:
        city = input('Would you like to see data for Chicago, New York or Washington?\n').lower()
        if city == 'chicago' or city == 'new york' or city == 'washington':
            break
     
    while True:
        x = input('Would you like to filter the data by month, day, both or not at all? Type "none" for no time filter.\n')
        if x == 'both':
            break
        elif x == 'not at all':
            sys.exit()
    # TO DO: get user input for month (all, january, february, ... , june)
    while True:
        month = input('Wich month? January, February, March, April, May, June?\n').lower()
        if month in months:
            break
        else:
            print('Enter valid month.')

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input('Wich day? please type your response as an integer (e.g., 1=Sunday).\n')
        try:
            day = int(day)
            if day <= 7 and day >=1  :
                break
            else:
                print("you have enter invalid input, please try again")
        except:
            print("you have enter invalid input.\n")

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour
    months = ['january', 'february', 'march', 'spril', 'may', 'june']
    month = months.index(month) + 1
    df = df[df['month'] == month]
    if day != 'all':
        days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday' , 'Saturday']
        day = days[day - 1 ]
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    print("The most common month: {}".format(df['month'].mode()[0]))

    # TO DO: display the most common day of week
    week = df['day_of_week'].mode()[0]
    print("The  most common start hour: {}".format(df['hour'].mode()[0]))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print('most commonly used start station: ', df['Start Station'].mode()[0])

    # TO DO: display most commonly used end station
    print('most commonly used end station: ', df['End Station'].mode()[0])

    # TO DO: display most frequent combination of start station and end station trip
    print('Most frequent start and end station: ', df.groupby(['Start Station'])['End Station'].value_counts().mode)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print(df['Trip Duration'])

    # TO DO: display mean travel time
    print(np.mean(df['Trip Duration']))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print("counts of user types: {}".format(df['User Type'].value_counts()))

    # TO DO: Display counts of gender
    print("counts of gender: {}".format(df['Gender'].value_counts()))

    # TO DO: Display earliest, most recent, and most common year of birth
    earliest = np.min(df['Birth Year'])
    recent = np.max(df['Birth Year'])
    commyear = df['Birth Year'].mode()[0]

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

  
def display_data(city):
    x = 5
    for i in city:
        print(city.head(x))
        x += 5
        while True:
            s = input('Do you want another 5 lines\n').lower()
            if s == 'yes' or s == 'no':
                break
            else:
                print('Enter yes or no\n')
        if s == 'no':
            break
        

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        if city == 'chicago' or city == 'new York':
            user_stats(df)
        else:
            print('Washington has no gender.\n')
        while True:
            row1 = input('Do you want to see data rows?\n').lower()
            if row1 == 'yes' or row1 == 'no':
                break
            else:
                print('Enter yes or no\n')
        if row1 == 'yes':
            display_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
